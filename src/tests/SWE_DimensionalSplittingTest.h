
#include <cxxtest/TestSuite.h>
#include "blocks/SWE_DimensionalSplitting.hh"
#include "scenarios/SWE_Scenario.hh"

#define private public
#define protected public

/**
 * Test DamBreak scenario used in SWE_DimensionalSplittingTest to simulate 
 * a one-dimensional DamBreak in two dimensions
 */
class DamBreak1DTestScenario : public SWE_Scenario {
private:
    /**
     * Determines the direction (X or Y) in which the dambreak happens
     * Use static constants DIR_X and DIR_Y to set the direction
     */
    const unsigned int m_direction;

public:
   /**
    * cross-check data (water heights) from SWE1D for dimensional splitting.
    * First array dimension addresses the timestep (0 for second timestep)
    * Second array dimension addresses the cell in the computational domain (0 for first non-ghost cell)
    */
   const static float check[50][50];
   
   /**
    * timecodes corresponding to the rows (timesteps) in the "check"-array
    */
   const static float checkTimecodes[50];
    
    /** Constant indicating a X-Direction */
    const static unsigned int DIR_X = 0;
    /** Constant indicating a Y-Direction */
    const static unsigned int DIR_Y = 1;
    
    
    /**
     * Constructor
     *
     * @param direction The direction in which the dambreak should happen (use DIR_X and DIR_Y)
     */
    DamBreak1DTestScenario(unsigned int direction)
        : m_direction(direction)
    {
    }

    /**
     * @return bathymetry at pos
     */
    float getBathymetry(float x, float y) {
    	return -10.0f;
    };

    /**
     * @return Initial water height at pos
     */
    float getWaterHeight(float x, float y) { 
    	if ((m_direction == DIR_X && x <= 24.f) || (m_direction == DIR_Y && y <= 24.f))
            return 10.0f;
        return 5.0f;
    };
    
    /**
     * Determines the type (e.g. reflecting wall or outflow) of a certain boundary
     *
     * @param edge The boundary edge
     * @return The type of the specified boundary (e.g. OUTFLOW or WALL)
     */
    BoundaryType getBoundaryType(BoundaryEdge edge) {
    	return OUTFLOW;
    };
  
    /** Get the boundary positions
     *
     * @param i_edge which edge
     * @return value in the corresponding dimension
     */
    float getBoundaryPos(BoundaryEdge i_edge) {
        if ( i_edge == BND_LEFT || i_edge == BND_BOTTOM )
            return 0.0f;
        else
            return 50.0f;
    };
};

/* Timecodes (for each row in the following checks array) */
const float DamBreak1DTestScenario::checkTimecodes[50] = {
    0.04038550,
    0.08004770,
    0.1189440,
    0.1566270,
    0.1934830,
    0.2298330,
    0.265860,
    0.3016750,
    0.3373430,
    0.3729070,
    0.4083970,
    0.4438310,
    0.4792220,
    0.5145810,
    0.5499070,
    0.5852080,
    0.6204930,
    0.6557670,
    0.6910320,
    0.7262910,
    0.7615450,
    0.7967960,
    0.8320430,
    0.8672860,
    0.9025250,
    0.9377620,
    0.9729970,
    1.008230,
    1.043460,
    1.078690,
    1.113920,
    1.149150,
    1.184370,
    1.21960,
    1.254830,
    1.290050,
    1.325270,
    1.36050,
    1.395720,
    1.430940,
    1.466160,
    1.501380,
    1.53660,
    1.571810,
    1.607030,
    1.642250,
    1.677470,
    1.712680,
    1.74790,
    1.783110
};

const float DamBreak1DTestScenario::check[50][50] = {
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.13397, 5.86603, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.69263, 8.59861, 6.4238, 5.28496, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.88655, 9.33765, 8.2476, 6.75746, 5.68595, 5.08478, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.95831, 9.69822, 9.01669, 8.00714, 6.94781, 6.07755, 5.27125, 5.02303, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.98487, 9.86686, 9.47945, 8.74203, 7.83319, 7.05728, 6.4045, 5.53393, 5.0919, 5.00599, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99456, 9.94308, 9.73616, 9.25609, 8.5097, 7.70273, 7.12136, 6.65479, 5.83196, 5.21958, 5.02846, 5.00153, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99806, 9.97633, 9.8716, 9.58054, 9.04135, 8.31351, 7.60279, 7.1595, 6.83624, 6.12631, 5.4055, 5.07951, 5.00838, 5.00039, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99931, 9.99037, 9.93975, 9.77362, 9.41242, 8.84134, 8.14766, 7.52521, 7.1826, 6.9633, 6.38964, 5.63599, 5.16966, 5.02662, 5.0024, 5.0001, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99976, 9.99616, 9.97262, 9.88267, 9.6553, 9.24093, 8.65842, 8.00725, 7.46447, 7.19691, 7.05037, 6.60855, 5.88906, 5.30439, 5.06395, 5.0085, 5.00067, 5.00002, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99991, 9.99849, 9.9879, 9.94139, 9.80595, 9.52335, 9.07221, 8.49295, 7.88822, 7.41663, 7.20605, 7.10928, 6.78091, 6.14125, 5.48168, 5.12847, 5.02255, 5.00263, 5.00019, 5.00001, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99997, 9.99941, 9.99477, 9.97166, 9.8949, 9.7125, 9.38378, 8.91012, 8.34431, 7.78723, 7.37882, 7.21214, 7.14887, 6.91127, 6.37362, 5.69165, 5.22676, 5.04976, 5.00761, 5.00079, 5.00005, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99999, 9.99977, 9.99779, 9.98669, 9.94507, 9.83315, 9.60614, 9.24144, 8.75687, 8.21142, 7.7015, 7.34886, 7.21641, 7.17545, 7.00704, 6.57461, 5.9189, 5.36174, 5.09623, 5.01821, 5.00249, 5.00023, 5.00001, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99991, 9.99908, 9.9939, 9.9722, 9.90663, 9.75748, 9.49082, 9.09995, 8.61361, 8.09299, 7.62872, 7.3251, 7.2196, 7.19336, 7.07593, 6.73995, 6.14643, 5.53104, 5.16799, 5.03804, 5.0064, 5.00079, 5.00007, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99997, 9.99962, 9.99727, 9.98633, 9.9495, 9.85596, 9.67012, 9.37012, 8.96189, 8.48076, 7.98773, 7.56695, 7.30627, 7.22212, 7.20555, 7.12475, 6.8707, 6.35959, 5.72673, 5.26971, 5.0716, 5.01432, 5.00219, 5.00025, 5.00002, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99999, 9.99985, 9.9988, 9.99345, 9.97352, 9.91735, 9.79362, 9.57369, 9.24711, 8.82903, 8.35832, 7.89437, 7.51459, 7.29135, 7.22422, 7.21398, 7.159, 6.97097, 6.54835, 5.93673, 5.40304, 5.12394, 5.02875, 5.0052, 5.00073, 5.00008, 5.00001, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99994, 9.99948, 9.99693, 9.9865, 9.95408, 9.87519, 9.72089, 9.47077, 9.12416, 8.70246, 8.24595, 7.81171, 7.47023, 7.27957, 7.22604, 7.21994, 7.18289, 7.04608, 6.70797, 6.1476, 5.56555, 5.19987, 5.05304, 5.01107, 5.00183, 5.00024, 5.00002, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 10, 9.99998, 9.99978, 9.99859, 9.99329, 9.97523, 9.92693, 9.82315, 9.63944, 9.36376, 9.00311, 8.58278, 8.14319, 7.73864, 7.4327, 7.27028, 7.22766, 7.22427, 7.19955, 7.10137, 6.83798, 6.3473, 5.75054, 5.30289, 5.09116, 5.02158, 5.00412, 5.00063, 5.00008, 5.00001, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 9.99999, 9.99991, 9.99936, 9.99674, 9.987, 9.95851, 9.89147, 9.76191, 9.55115, 9.25473, 8.88529, 8.47029, 8.04947, 7.67415, 7.401, 7.263, 7.22915, 7.22751, 7.2112, 7.14152, 6.94071, 6.52706, 5.94805, 5.43402, 5.14743, 5.03917, 5.00846, 5.0015, 5.00021, 5.00002, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 10, 9.99996, 9.99972, 9.99845, 9.99334, 9.9771, 9.9354, 9.84757, 9.69255, 9.45785, 9.14537, 8.77164, 8.36505, 7.96421, 7.61734, 7.37427, 7.25732, 7.23052, 7.23004, 7.2194, 7.17041, 7.01996, 6.68206, 6.14686, 5.59089, 5.22586, 5.06691, 5.01612, 5.00322, 5.00053, 5.00007, 5.00001, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 10, 9.99998, 9.99988, 9.99927, 9.99667, 9.98769, 9.96265, 9.90531, 9.79555, 9.61639, 9.36127, 9.03707, 8.66277, 8.26695, 7.88682, 7.56738, 7.35177, 7.25293, 7.2318, 7.23207, 7.22525, 7.19107, 7.07994, 6.81098, 6.33661, 5.76762, 5.32922, 5.1084, 5.02888, 5.00642, 5.00119, 5.00018, 5.00002, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 9.99999, 9.99995, 9.99967, 9.99836, 9.99353, 9.97898, 9.94287, 9.86797, 9.73609, 9.53484, 9.26291, 8.93086, 8.55908, 8.1758, 7.8167, 7.52352, 7.33288, 7.24957, 7.23301, 7.23375, 7.22949, 7.20581, 7.12467, 6.91509, 6.50941, 5.95563, 5.45811, 5.16741, 5.04906, 5.01201, 5.00249, 5.00043, 5.00006, 5.00001, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 10, 9.99998, 9.99985, 9.99921, 9.99668, 9.98847, 9.96646, 9.91715, 9.82347, 9.67009, 9.44928, 9.16405, 8.82753, 8.46076, 8.09133, 7.7533, 7.48511, 7.31706, 7.24704, 7.23414, 7.23519, 7.23263, 7.21632, 7.15764, 6.99717, 6.66054, 6.14521, 5.61023, 5.24737, 5.07951, 5.02127, 5.00484, 5.00094, 5.00015, 5.00002, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 9.99999, 9.99993, 9.99963, 9.99833, 9.99382, 9.98082, 9.94942, 9.88517, 9.7722, 9.59861, 9.361, 9.06575, 8.72766, 8.36789, 8.01323, 7.69609, 7.45152, 7.30385, 7.24516, 7.23521, 7.23645, 7.23502, 7.22386, 7.18175, 7.06063, 6.78824, 6.32719, 5.78033, 5.35054, 5.12353, 5.03594, 5.00892, 5.00191, 5.00035, 5.00005, 5.00001, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 10, 9.99997, 9.99983, 9.99917, 9.99675, 9.98929, 9.96993, 9.92732, 9.84688, 9.71478, 9.52275, 9.27114, 8.96885, 8.63163, 8.28045, 7.94118, 7.64456, 7.42223, 7.29285, 7.24381, 7.23622, 7.23757, 7.23689, 7.2293, 7.19928, 7.10894, 6.89309, 6.49439, 5.9608, 5.47726, 5.18447, 5.05824, 5.01565, 5.00364, 5.00073, 5.00013, 5.00002, 5, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 9.99999, 9.99992, 9.9996, 9.99833, 9.99415, 9.98256, 9.95519, 9.89978, 9.80247, 9.65197, 9.44358, 9.1807, 8.87401, 8.5397, 8.19833, 7.87484, 7.59824, 7.39674, 7.28373, 7.24288, 7.23717, 7.23859, 7.2384, 7.23327, 7.21198, 7.14526, 6.97715, 6.64222, 6.143, 5.62532, 5.26534, 5.09084, 5.02632, 5.00662, 5.00145, 5.00028, 5.00005, 5.00001, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 10, 9.99996, 9.99981, 9.99916, 9.99687, 9.99011, 9.97306, 9.93609, 9.86668, 9.75232, 9.58464, 9.3621, 9.09052, 8.78173, 8.45201, 8.12139, 7.81387, 7.55669, 7.37462, 7.27619, 7.24228, 7.23808, 7.23952, 7.23966, 7.23623, 7.2212, 7.17231, 7.04325, 6.76868, 6.31871, 5.78992, 5.36804, 5.13678, 5.04261, 5.01151, 5.00273, 5.00057, 5.0001, 5.00002, 5, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 10, 9.99998, 9.99991, 9.99958, 9.99836, 9.99452, 9.98418, 9.96026, 9.91228, 9.82804, 9.697, 9.51365, 9.27921, 9.00128, 8.69237, 8.36861, 8.04946, 7.75794, 7.51948, 7.35545, 7.26998, 7.24193, 7.23894, 7.24038, 7.24073, 7.23847, 7.22789, 7.19231, 7.09441, 6.87388, 6.48128, 5.96422, 5.49271, 5.19911, 5.06665, 5.01927, 5.0049, 5.0011, 5.00022, 5.00004, 5.00001, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 9.99999, 9.99996, 9.99979, 9.99915, 9.99702, 9.99092, 9.97587, 9.9437, 9.88353, 9.78412, 9.63716, 9.43986, 9.1957, 8.91354, 8.60619, 8.2895, 7.98232, 7.70671, 7.48624, 7.3389, 7.2649, 7.24179, 7.23976, 7.24118, 7.24167, 7.24021, 7.23279, 7.20703, 7.1335, 6.95939, 6.62628, 6.14041, 5.63725, 5.28048, 5.10098, 5.03116, 5.00847, 5.00204, 5.00043, 5.00008, 5.00001, 5, 5, 5, 5, 5, 5, 5},
    {10, 10, 9.99998, 9.9999, 9.99957, 9.99841, 9.99489, 9.98568, 9.96473, 9.92301, 9.8498, 9.73528, 9.57349, 9.36408, 9.11226, 8.82773, 8.52335, 8.21463, 7.91979, 7.65989, 7.4566, 7.32464, 7.26077, 7.24181, 7.24053, 7.24193, 7.24251, 7.2416, 7.2364, 7.21783, 7.16306, 7.02756, 6.75157, 6.31095, 5.79722, 5.38254, 5.14839, 5.04883, 5.01411, 5.00363, 5.00083, 5.00017, 5.00003, 5, 5, 5, 5, 5, 5, 5},
    {10, 9.99999, 9.99995, 9.99979, 9.99917, 9.99718, 9.99168, 9.9784, 9.95031, 9.89795, 9.81122, 9.68202, 9.50672, 9.28702, 9.02945, 8.74418, 8.44397, 8.14391, 7.86163, 7.61717, 7.43024, 7.31239, 7.25742, 7.24196, 7.24127, 7.24263, 7.24326, 7.24274, 7.23911, 7.22576, 7.18525, 7.08104, 6.85692, 6.46964, 5.96637, 5.50531, 5.21171, 5.07432, 5.02278, 5.00622, 5.00152, 5.00033, 5.00006, 5.00001, 5, 5, 5, 5, 5, 5},
    {10, 9.99998, 9.9999, 9.99957, 9.99847, 9.99527, 9.98706, 9.96866, 9.93228, 9.86843, 9.76802, 9.6249, 9.43755, 9.20934, 8.94774, 8.66313, 8.36808, 8.07724, 7.80763, 7.57826, 7.40684, 7.3019, 7.25474, 7.24219, 7.24197, 7.2433, 7.24396, 7.2437, 7.24117, 7.2316, 7.20179, 7.12245, 6.94351, 6.6122, 6.13754, 5.64677, 5.29332, 5.11002, 5.03574, 5.01033, 5.00268, 5.00063, 5.00013, 5.00002, 5, 5, 5, 5, 5, 5},
    {9.99999, 9.99995, 9.99978, 9.99919, 9.99736, 9.99241, 9.98067, 9.95607, 9.91037, 9.83445, 9.72057, 9.5645, 9.36661, 9.13159, 8.8675, 8.58478, 8.2957, 8.01449, 7.75758, 7.5429, 7.38612, 7.29295, 7.25261, 7.2425, 7.24263, 7.24392, 7.2446, 7.24452, 7.24277, 7.23592, 7.21408, 7.15418, 7.01332, 6.73639, 6.30374, 5.80278, 5.39466, 5.15858, 5.05458, 5.01666, 5.00458, 5.00113, 5.00025, 5.00005, 5.00001, 5, 5, 5, 5, 5},
    {9.99998, 9.99989, 9.99957, 9.99855, 9.99563, 9.98832, 9.97213, 9.94031, 9.88445, 9.79617, 9.66929, 9.50143, 9.29452, 9.05426, 8.78904, 8.50923, 8.22679, 7.95552, 7.71127, 7.51081, 7.36782, 7.28533, 7.25094, 7.24286, 7.24327, 7.24452, 7.2452, 7.24525, 7.24404, 7.23913, 7.2232, 7.17828, 7.06872, 6.84176, 6.45913, 5.96757, 5.51567, 5.2226, 5.08127, 5.02614, 5.00757, 5.00198, 5.00047, 5.0001, 5.00002, 5, 5, 5, 5, 5},
    {9.99995, 9.99978, 9.99922, 9.99753, 9.99308, 9.98269, 9.96111, 9.92111, 9.85446, 9.75384, 9.61466, 9.43624, 9.22181, 8.97773, 8.71259, 8.43656, 8.1613, 7.9002, 7.66847, 7.48176, 7.35169, 7.27887, 7.24965, 7.24325, 7.24388, 7.24508, 7.24577, 7.2459, 7.24508, 7.24156, 7.22996, 7.19647, 7.1121, 6.92918, 6.59957, 6.13448, 5.6544, 5.30426, 5.11809, 5.04003, 5.01218, 5.00337, 5.00084, 5.00019, 5.00004, 5.00001, 5, 5, 5, 5},
    {9.99989, 9.99958, 9.99863, 9.99598, 9.98947, 9.9752, 9.9473, 9.89829, 9.82049, 9.70778, 9.55719, 9.3695, 9.14895, 8.90236, 8.63833, 8.36681, 8.09916, 7.84836, 7.62901, 7.45552, 7.33752, 7.27341, 7.24867, 7.24367, 7.24446, 7.24562, 7.2463, 7.2465, 7.24595, 7.24343, 7.23498, 7.21013, 7.14571, 7.00033, 6.72277, 6.29698, 5.80698, 5.40484, 5.16754, 5.05986, 5.01912, 5.00555, 5.00147, 5.00035, 5.00008, 5.00002, 5, 5, 5, 5},
    {9.99978, 9.99925, 9.9977, 9.99371, 9.9845, 9.96553, 9.93042, 9.87178, 9.78269, 9.65837, 9.49737, 9.30171, 9.07635, 8.82839, 8.56637, 8.29999, 8.04029, 7.79987, 7.59266, 7.43185, 7.32509, 7.26883, 7.24796, 7.24411, 7.24501, 7.24613, 7.24681, 7.24705, 7.24669, 7.24488, 7.23873, 7.22036, 7.17151, 7.05734, 6.82809, 6.44953, 5.96801, 5.52422, 5.23204, 5.08755, 5.02933, 5.00891, 5.00247, 5.00063, 5.00014, 5.00003, 5.00001, 5, 5, 5},
    {9.9996, 9.99871, 9.99631, 9.9905, 9.97791, 9.95339, 9.9103, 9.84158, 9.74129, 9.60604, 9.4357, 9.2333, 9.00436, 8.75606, 8.49681, 8.23608, 7.98459, 7.75457, 7.55926, 7.41057, 7.31423, 7.26498, 7.24746, 7.24456, 7.24554, 7.24662, 7.24728, 7.24756, 7.24734, 7.24603, 7.24156, 7.22801, 7.19119, 7.10242, 6.91615, 6.58812, 6.13126, 5.66052, 5.31361, 5.12528, 5.04401, 5.01399, 5.00407, 5.00108, 5.00026, 5.00006, 5.00001, 5, 5, 5},
    {9.99929, 9.99787, 9.99429, 9.98612, 9.96941, 9.93853, 9.88682, 9.80779, 9.6966, 9.5512, 9.37263, 9.1647, 8.93325, 8.68552, 8.42971, 8.17505, 7.93197, 7.71232, 7.52862, 7.39145, 7.30476, 7.26179, 7.24713, 7.24501, 7.24604, 7.24709, 7.24774, 7.24804, 7.24792, 7.24698, 7.24371, 7.23374, 7.20611, 7.13766, 6.98842, 6.71041, 6.29057, 5.81009, 5.41341, 5.17541, 5.06469, 5.02148, 5.00652, 5.00182, 5.00047, 5.00011, 5.00002, 5, 5, 5},
    {9.99879, 9.99662, 9.99144, 9.98031, 9.95872, 9.92075, 9.85994, 9.77057, 9.64896, 9.49429, 9.30858, 9.09623, 8.86329, 8.6169, 8.36509, 8.11684, 7.88232, 7.67297, 7.50055, 7.37434, 7.29653, 7.25914, 7.24694, 7.24546, 7.24653, 7.24754, 7.24818, 7.24849, 7.24845, 7.24776, 7.24537, 7.23803, 7.21738, 7.16498, 7.0468, 6.81563, 6.44065, 5.96783, 5.53127, 5.24023, 5.09322, 5.03231, 5.01023, 5.00298, 5.0008, 5.0002, 5.00004, 5.00001, 5, 5},
    {9.99804, 9.99482, 9.98757, 9.97282, 9.94561, 9.89992, 9.82971, 9.73014, 9.59873, 9.43572, 9.24395, 9.02822, 8.79465, 8.55029, 8.30297, 8.06141, 7.83554, 7.63638, 7.4749, 7.35905, 7.2894, 7.25697, 7.24687, 7.24591, 7.247, 7.24797, 7.24859, 7.24892, 7.24893, 7.24844, 7.24667, 7.24126, 7.22588, 7.186, 7.09334, 6.90422, 6.57761, 6.12789, 5.66538, 5.32162, 5.13168, 5.04769, 5.01572, 5.00478, 5.00134, 5.00035, 5.00008, 5.00002, 5, 5},
    {9.99691, 9.99229, 9.98244, 9.96339, 9.92988, 9.87598, 9.79622, 9.68679, 9.54627, 9.37589, 9.17908, 8.96091, 8.7275, 8.48577, 8.24332, 8.00868, 7.79151, 7.6024, 7.45149, 7.34541, 7.28324, 7.25519, 7.24689, 7.24635, 7.24744, 7.24838, 7.24899, 7.24932, 7.24938, 7.24902, 7.24772, 7.24372, 7.23228, 7.20208, 7.13004, 6.97743, 6.69908, 6.28442, 5.81228, 5.42064, 5.18233, 5.0691, 5.0237, 5.00749, 5.00219, 5.00059, 5.00015, 5.00003, 5.00001, 5},
    {9.9953, 9.98886, 9.97583, 9.95181, 9.91138, 9.8489, 9.75965, 9.6408, 9.49197, 9.31516, 9.11427, 8.89451, 8.66197, 8.42337, 8.18613, 7.95859, 7.75013, 7.5709, 7.43018, 7.33329, 7.27794, 7.25376, 7.24698, 7.24678, 7.24787, 7.24878, 7.24937, 7.24971, 7.24979, 7.24954, 7.24857, 7.24561, 7.2371, 7.21433, 7.15872, 7.037, 6.80419, 6.43235, 5.96714, 5.53708, 5.24734, 5.09832, 5.0351, 5.01151, 5.0035, 5.00099, 5.00026, 5.00006, 5.00001, 5},
    {9.99306, 9.98433, 9.9675, 9.93787, 9.89001, 9.81876, 9.7202, 9.5925, 9.43618, 9.25387, 9.04978, 8.82921, 8.59813, 8.36311, 8.13137, 7.91106, 7.7113, 7.54174, 7.41082, 7.32253, 7.27339, 7.25262, 7.24714, 7.2472, 7.24828, 7.24916, 7.24974, 7.25008, 7.25019, 7.25001, 7.24928, 7.24708, 7.24075, 7.22363, 7.18096, 7.08484, 6.89321, 6.56787, 6.12441, 5.66921, 5.32849, 5.13738, 5.05108, 5.01738, 5.00548, 5.00161, 5.00044, 5.00011, 5.00003, 5.00001},
    {9.99002, 9.97848, 9.95724, 9.92141, 9.86575, 9.78567, 9.67812, 9.54221, 9.37923, 9.1923, 8.98585, 8.76515, 8.53607, 8.305, 8.07899, 7.866, 7.67489, 7.5148, 7.39326, 7.31302, 7.2695, 7.25173, 7.24733, 7.24762, 7.24868, 7.24953, 7.25009, 7.25043, 7.25056, 7.25044, 7.24989, 7.24824, 7.24353, 7.23068, 7.1981, 7.12283, 6.96724, 6.68862, 6.27851, 5.81372, 5.42673, 5.18842, 5.07311, 5.0258, 5.00843, 5.00256, 5.00073, 5.00019, 5.00005, 5.00001},
    {9.98601, 9.97112, 9.94487, 9.90234, 9.83861, 9.74978, 9.63368, 9.49026, 9.32145, 9.13074, 8.92266, 8.70246, 8.47584, 8.24904, 8.02895, 7.82335, 7.64081, 7.48995, 7.37737, 7.30462, 7.26619, 7.25104, 7.24757, 7.24802, 7.24906, 7.24988, 7.25043, 7.25077, 7.25092, 7.25084, 7.25042, 7.24917, 7.24565, 7.23602, 7.21125, 7.15272, 7.02786, 6.79362, 6.42454, 5.96603, 5.54185, 5.25353, 5.10291, 5.03769, 5.01274, 5.00401, 5.00118, 5.00032, 5.00008, 5.00002},
    {9.98083, 9.96203, 9.93022, 9.88058, 9.80866, 9.71129, 9.58716, 9.43696, 9.26313, 9.0694, 8.86038, 8.64121, 8.41746, 8.1952, 7.98119, 7.78301, 7.60896, 7.46707, 7.36302, 7.29723, 7.26339, 7.25052, 7.24783, 7.24841, 7.24943, 7.25022, 7.25076, 7.2511, 7.25126, 7.25122, 7.25089, 7.24994, 7.2473, 7.24008, 7.22131, 7.17607, 7.07684, 6.88301, 6.55879, 6.12084, 5.67217, 5.33437, 5.14244, 5.05419, 5.01895, 5.00617, 5.00188, 5.00053, 5.00014, 5.00003},
    {9.9743, 9.95103, 9.91318, 9.85613, 9.77601, 9.67043, 9.53886, 9.38261, 9.20452, 9.0085, 8.79915, 8.58149, 8.36096, 8.14348, 7.93566, 7.74492, 7.57923, 7.44605, 7.35009, 7.29074, 7.26103, 7.25015, 7.24811, 7.24879, 7.24978, 7.25055, 7.25108, 7.25141, 7.25158, 7.25157, 7.25132, 7.25058, 7.24859, 7.24317, 7.22898, 7.1942, 7.11599, 6.95776, 6.67889, 6.27278, 5.81454, 5.43185, 5.19378, 5.07675, 5.02777, 5.00934, 5.00294, 5.00087, 5.00024, 5.00006},
    {9.96623, 9.93798, 9.89365, 9.82902, 9.74083, 9.62744, 9.48904, 9.32747, 9.14586, 8.94822, 8.73908, 8.52336, 8.30634, 8.09383, 7.89229, 7.70898, 7.55152, 7.42675, 7.33847, 7.28507, 7.25906, 7.2499, 7.2484, 7.24916, 7.25012, 7.25086, 7.25138, 7.25172, 7.25189, 7.2519, 7.25171, 7.25113, 7.24961, 7.24554, 7.23483, 7.20819, 7.14699, 7.0193, 6.78378, 6.41714, 5.96458, 5.54573, 5.2589, 5.10703, 5.04008, 5.01392, 5.00452, 5.00138, 5.00039, 5.0001},
    {9.95645, 9.92273, 9.87162, 9.79933, 9.70329, 9.58258, 9.438, 9.27182, 9.08737, 8.88869, 8.68025, 8.46683, 8.2536, 8.04622, 7.85104, 7.67512, 7.52574, 7.40909, 7.32805, 7.28012, 7.25741, 7.24976, 7.2487, 7.24952, 7.25045, 7.25117, 7.25168, 7.25201, 7.25219, 7.25222, 7.25207, 7.25161, 7.25045, 7.24737, 7.23929, 7.21896, 7.17136, 7.06931, 6.8735, 6.55026, 6.11718, 5.6744, 5.3394, 5.14694, 5.05704, 5.02044, 5.00685, 5.00215, 5.00064, 5.00018},
    {9.9448, 9.9052, 9.84708, 9.76717, 9.66359, 9.53609, 9.38598, 9.21587, 9.02921, 8.83005, 8.62274, 8.41195, 8.20272, 8.00061, 7.81183, 7.64326, 7.50178, 7.39295, 7.31873, 7.27581, 7.25606, 7.24969, 7.24901, 7.24986, 7.25077, 7.25147, 7.25196, 7.25229, 7.25247, 7.25252, 7.2524, 7.25204, 7.25113, 7.2488, 7.2427, 7.22722, 7.19039, 7.1095, 6.94888, 6.66978, 6.26721, 5.81483, 5.43613, 5.19848, 5.08004, 5.0296, 5.01022, 5.00331, 5.00101, 5.00029}
};


class SWE_DimensionalSplittingTest : public CxxTest::TestSuite {
    private:
        /** tolerance for assertions */
        const static float TOLERANCE = 1e-5;
        /** relative tolerance for assertions */
        const static float REL_TOLERANCE = 0.025;
        
        /** Number of cells */
        const static unsigned int SIZE = 50;
        
        /** Number of timesteps to compute */
        const static unsigned int TIMESTEPS = 50;
        
        /**
         * Simulate a one dimensional DamBreak in two dimensions
         * and check the results
         * @param dir The direction of the dambreak (1 for X, 0 for Y)
         */
        void testDamBreak(unsigned int dir) {
            // Init dimsplitting
            SWE_DimensionalSplitting dimensionalSplitting(SIZE, SIZE, 1.f, 1.f);
            
            // Init testing scenario
            DamBreak1DTestScenario scenario(dir);
            
            // Init with test scenario
            dimensionalSplitting.initScenario(0.f, 0.f, scenario);
            
            // passed simulation time
            float t = 0.0;
            // index for timestep comparisons
            unsigned int index = 0;
            
            for(unsigned int step = 0; step < TIMESTEPS; step++) {
                
                // set values in ghost cells:
                dimensionalSplitting.setGhostLayer();
                
                // compute numerical flux on each edge
                dimensionalSplitting.computeNumericalFluxes();
            
                // update the cell values with maximum timestep
                t += dimensionalSplitting.getMaxTimestep();
                dimensionalSplitting.updateUnknowns(dimensionalSplitting.getMaxTimestep());
                
                // Cells have been updates, check the results
                if(dir == DamBreak1DTestScenario::DIR_X) {
                    // DamBreak is in X direction
                    // all values in one column should have (roughly) the same value, since
                    // we're x direction only
                    for(int i = 1; i <= SIZE; i++) {
                        for(int j = 1; j < SIZE; j++) {
                            TS_ASSERT_DELTA(
                                dimensionalSplitting.getWaterHeight()[i][j],
                                dimensionalSplitting.getWaterHeight()[i][j+1],
                                TOLERANCE);
                        }
                    }
                } else {
                    // DamBreak is in Y direction
                    // all values in one row should have (roughly) the same value, since
                    // we're y direction only
                    for(int j = 1; j <= SIZE; j++) {
                        for(int i = 1; i < SIZE; i++) {
                            TS_ASSERT_DELTA(
                                dimensionalSplitting.getWaterHeight()[i][j],
                                dimensionalSplitting.getWaterHeight()[i+1][j],
                                TOLERANCE);
                        }
                    }
                }
                
                
                // Cross-check the values with the results from SWE1D
                // Note that we have to check the timecode, since same number of 
                // timesteps does not imply that the same time has passed (due
                // to the slightly pessimistic CFL criterion)
                
                // Check if we have exceeded the pre-computed cross-checked time from SWE1D
                // If so, skip the tests, since they will be useless anyways
                if(t > DamBreak1DTestScenario::checkTimecodes[TIMESTEPS-1]) {
                    TS_WARN("Exceeded cross-check simulation time");
                    break;
                } else {
                    // find the nearest timestep index (in terms of time)
                    unsigned int index = 0;
                    float current = DamBreak1DTestScenario::checkTimecodes[index];
                    float next = DamBreak1DTestScenario::checkTimecodes[index+1];
                    while(index < TIMESTEPS-1 && std::fabs(current-t) > std::fabs(next-t)) {
                        index++;
                        current = DamBreak1DTestScenario::checkTimecodes[index];
                        next = DamBreak1DTestScenario::checkTimecodes[index+1];
                    }
                    
                    // compare each cell of the 2D result to the "nearest" (in terms of time) 1D result
                    for(int i = 1; i <= SIZE; i++) {
                        float height;
                        if(dir == DamBreak1DTestScenario::DIR_X) {
                            height = dimensionalSplitting.getWaterHeight()[i][1];
                        } else {
                            height = dimensionalSplitting.getWaterHeight()[1][i];
                        }
                        float check = DamBreak1DTestScenario::check[index][i-1];
                        TS_ASSERT_DELTA(
                            (height - check) / check,
                            0.0,
                            REL_TOLERANCE);
                    }

                }
            }
        }
    public:
        /** Simulate the 1D DamBreak in Y direction */
        void testDamBreakY() {
            testDamBreak(DamBreak1DTestScenario::DIR_Y);
        }
        /** Simulate the 1D DamBreak in X direction */
        void testDamBreakX() {
            testDamBreak(DamBreak1DTestScenario::DIR_X);
        }
};
